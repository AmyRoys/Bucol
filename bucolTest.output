Terminals unused in grammar

   STRING
   ADD
   INPUT
   PRINT
   SEMICOLON
   QUESTION_MARK
   PLUS
   EQUALS


Grammar

    0 $accept: program $end

    1 program: BEGINNING declarations BODY statements END
    2        | error

    3 declarations: /* empty */
    4             | declarations declaration

    5 declaration: CAPACITY IDENTIFIER DOT

    6 statements: /* empty */
    7           | statements statement

    8 statement: MOVE INTEGER TO IDENTIFIER
    9          | MOVE IDENTIFIER TO IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
error (256) 2
CAPACITY (258) 5
IDENTIFIER (259) 5 8 9
INTEGER (260) 8
STRING (261)
BEGINNING (262) 1
END (263) 1
BODY (264) 1
MOVE (265) 8 9
ADD (266)
TO (267) 8 9
INPUT (268)
PRINT (269)
SEMICOLON (270)
DOT (271) 5
QUESTION_MARK (272)
PLUS (273)
EQUALS (274)


Nonterminals, with rules where they appear

$accept (20)
    on left: 0
program (21)
    on left: 1 2, on right: 0
declarations (22)
    on left: 3 4, on right: 1 4
declaration (23)
    on left: 5, on right: 4
statements (24)
    on left: 6 7, on right: 1 7
statement (25)
    on left: 8 9, on right: 7


state 0

    0 $accept: . program $end

    error      shift, and go to state 1
    BEGINNING  shift, and go to state 2

    program  go to state 3


state 1

    2 program: error .

    $default  reduce using rule 2 (program)


state 2

    1 program: BEGINNING . declarations BODY statements END

    $default  reduce using rule 3 (declarations)

    declarations  go to state 4


state 3

    0 $accept: program . $end

    $end  shift, and go to state 5


state 4

    1 program: BEGINNING declarations . BODY statements END
    4 declarations: declarations . declaration

    CAPACITY  shift, and go to state 6
    BODY      shift, and go to state 7

    declaration  go to state 8


state 5

    0 $accept: program $end .

    $default  accept


state 6

    5 declaration: CAPACITY . IDENTIFIER DOT

    IDENTIFIER  shift, and go to state 9


state 7

    1 program: BEGINNING declarations BODY . statements END

    $default  reduce using rule 6 (statements)

    statements  go to state 10


state 8

    4 declarations: declarations declaration .

    $default  reduce using rule 4 (declarations)


state 9

    5 declaration: CAPACITY IDENTIFIER . DOT

    DOT  shift, and go to state 11


state 10

    1 program: BEGINNING declarations BODY statements . END
    7 statements: statements . statement

    END   shift, and go to state 12
    MOVE  shift, and go to state 13

    statement  go to state 14


state 11

    5 declaration: CAPACITY IDENTIFIER DOT .

    $default  reduce using rule 5 (declaration)


state 12

    1 program: BEGINNING declarations BODY statements END .

    $default  reduce using rule 1 (program)


state 13

    8 statement: MOVE . INTEGER TO IDENTIFIER
    9          | MOVE . IDENTIFIER TO IDENTIFIER

    IDENTIFIER  shift, and go to state 15
    INTEGER     shift, and go to state 16


state 14

    7 statements: statements statement .

    $default  reduce using rule 7 (statements)


state 15

    9 statement: MOVE IDENTIFIER . TO IDENTIFIER

    TO  shift, and go to state 17


state 16

    8 statement: MOVE INTEGER . TO IDENTIFIER

    TO  shift, and go to state 18


state 17

    9 statement: MOVE IDENTIFIER TO . IDENTIFIER

    IDENTIFIER  shift, and go to state 19


state 18

    8 statement: MOVE INTEGER TO . IDENTIFIER

    IDENTIFIER  shift, and go to state 20


state 19

    9 statement: MOVE IDENTIFIER TO IDENTIFIER .

    $default  reduce using rule 9 (statement)


state 20

    8 statement: MOVE INTEGER TO IDENTIFIER .

    $default  reduce using rule 8 (statement)
